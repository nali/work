{"name":"Work","tagline":"","body":"# A sample of the work of Nabeelah Ali\r\n\r\n## Confluence Feature development \r\nI currently work at Atlassian, where I work on one of Atlassian's flagship products: [Confluence](https://www.atlassian.com/software/confluence) - a collaborative wiki designed to replace email. Here are a couple of projects I've worked on over the years.\r\n\r\n### Multi file type previewer\r\n\r\nLanguages: `JavaScript`, `HTML`, `CSS`\r\n\r\nLibraries & tools: `Backbone.js`, `underscore.js`, `jQuery`, `Karma`, `QUnit`, `sinon.js`, `almond`, `WebDriver`\r\n\r\nInvolvement: Developer in a team of 2\r\n\r\nAt Atlassian, we used to use fancybox in almost all our applications. We wanted to replace fancybox with our own file viewer that was lightweight, supported our own set of features, like annotating files,\r\nand more than just images. Along with a graduate developer, I wrote a component that now has almost 200,000 users daily (and no major issues have arisen!). I'm proud of creating a quality, cross-browser file viewer, and mentoring the graduate developer through the process. The API has been easy enough to use that another Atlassian team has started using the file viewer in their product. \r\n\r\nScreenshot: \r\n![](https://github.com/nali/work/blob/master/screenshots/file_viewer.png)\r\n\r\n\r\nHTML extract:\r\n    <!DOCTYPE html>\r\n    <html>\r\n    <head>\r\n        <title></title>\r\n    </head>\r\n    \r\n    <body>\r\n        <div id=\"cp-container\">\r\n            <div class=\"aui-group\" id=\"cp-header\">\r\n                <div class=\"aui-item expanded\" id=\"cp-title-container\">\r\n                    <div data-type=\"image\">\r\n                        IMG_9857.JPG\r\n                    </div>\r\n                </div>\r\n    \r\n                <div class=\"aui-item\" id=\"cp-file-controls\">\r\n                    <span><a class=\"cp-icon\" href=\"#\" id=\"cp-control-panel-upload\"\r\n                    style=\r\n                    \"position: relative; z-index: 0;\"></a></span><span><a class=\r\n                    \"cp-icon\" href=\r\n                    \"https://extranet.atlassian.com/download/attachments/2302285232/IMG_9857.JPG?version=1&amp;modificationDate=1411349441938&amp;api=v2\"\r\n                    id=\"cp-control-panel-download\"></a></span><span><a class=\r\n                    \"cp-icon\" href=\"#\" id=\"cp-control-panel-close\"></a></span>\r\n                </div>\r\n            </div>\r\n    \r\n            <div class=\"minimode-banner short\" id=\"cp-file-body\">\r\n                <div class=\"cp-file-body-content\">\r\n                    <div id=\"cp-image-preview\">\r\n                        <div class=\"cp-image-container cp-fit-height\"><img alt=\r\n                        \"IMG_9857.JPG\" class=\"panning\" id=\"cp-img\" src=\r\n                        \"https://extranet.atlassian.com/download/attachments/2302285232/IMG_9857.JPG?version=1&amp;modificationDate=1411349441938&amp;api=v2\"\r\n                        style=\"width: auto; height: 100%;\"></div><span class=\r\n                        \"cp-baseline-extension\"></span>\r\n    \r\n                        <div id=\"cp-file-control\" style=\"display: none;\">\r\n                            <a class=\"cp-icon\" href=\"#\" id=\r\n                            \"cp-file-control-minus\">Zoom out</a><a class=\"cp-icon\"\r\n                            href=\"#\" id=\"cp-file-control-plus\">Zoom in</a><a class=\r\n                            \"cp-icon\" href=\"#\" id=\"cp-file-control-fit\">Fit to page\r\n                            width</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n    \r\n                <div>\r\n                    <div class=\"cp-spinner\"></div>\r\n                </div>\r\n    \r\n                <div>\r\n                    <a class=\"cp-nav\" href=\"#\" id=\"cp-nav-left\" style=\r\n                    \"display: inline;\">Go to the previous file</a><a class=\"cp-nav\"\r\n                    href=\"#\" id=\"cp-nav-right\" style=\"display: inline;\">Go to the\r\n                    next file</a>\r\n                </div>\r\n            </div>\r\n    \r\n            <div class=\"panel-view expanded\" id=\"cp-footer\">\r\n                <div id=\"cp-footer-bar\">\r\n                    <a href=\"#\" id=\"cp-files-label\">Show all files<span class=\r\n                    \"aui-icon aui-icon-small aui-iconfont-arrows-up cp-files-collapser up\">Show\r\n                    all files</span><span class=\r\n                    \"aui-icon aui-icon-small aui-iconfont-arrows-down cp-files-collapser down hidden\">Hide\r\n                    all files</span></a>\r\n                </div>\r\n    \r\n                <div id=\"cp-footer-minimode\">\r\n                    <ol id=\"cp-thumbnails\">\r\n                        <li class=\"cp-thumbnail\">\r\n                            <figure class=\"cp-thumbnail-group\">\r\n                                <div class=\"cp-thumbnail-img\">\r\n                                    <a class=\"cp-thumbnail-img-container\" href=\r\n                                    \"#\"><img alt=\r\n                                    \"View a larger version of image2014-9-22 11:21:27.png\"\r\n                                    src=\r\n                                    \"https://extranet.atlassian.com/download/thumbnails/2302285232/image2014-9-22%2011%3A21%3A27.png?api=v2\"></a>\r\n                                </div>\r\n    \r\n                                <figcaption class=\"cp-thumbnail-title\">\r\n                                    image2014-9-22 11:21:27.png\r\n                                </figcaption>\r\n                            </figure>\r\n                        </li>\r\n    \r\n                        <li class=\"cp-thumbnail\">\r\n                            <figure class=\"cp-thumbnail-group\">\r\n                                <div class=\"cp-thumbnail-img\">\r\n                                    <a class=\"cp-thumbnail-img-container\" href=\r\n                                    \"#\"><img alt=\r\n                                    \"View a larger version of naplassian-3.gif\"\r\n                                    src=\"https://extranet.atlassian.com/download/thumbnails/2302285232/naplassian-3.gif?api=v2\"></a>\r\n                                </div>\r\n    \r\n                                <figcaption class=\"cp-thumbnail-title\">\r\n                                    naplassian-3.gif\r\n                                </figcaption>\r\n                            </figure>\r\n                        </li>\r\n    \r\n                        <li class=\"cp-thumbnail\">\r\n                            <figure class=\"cp-thumbnail-group\">\r\n                                <div class=\"cp-thumbnail-img\">\r\n                                    <a class=\"cp-thumbnail-img-container\" href=\r\n                                    \"#\"><img alt=\r\n                                    \"View a larger version of IMG_9849-001.JPG\"\r\n                                    src=\"https://extranet.atlassian.com/download/thumbnails/2302285232/IMG_9849-001.JPG?api=v2\"></a>\r\n                                </div>\r\n    \r\n                                <figcaption class=\"cp-thumbnail-title\">\r\n                                    IMG_9849-001.JPG\r\n                                </figcaption>\r\n                            </figure>\r\n                        </li>\r\n    \r\n                        <li class=\"cp-thumbnail\">\r\n                            <figure class=\"cp-thumbnail-group\">\r\n                                <div class=\"cp-thumbnail-img\">\r\n                                    <a class=\"cp-thumbnail-img-container\" href=\r\n                                    \"#\"><img alt=\r\n                                    \"View a larger version of IMG_9830.JPG\" src=\r\n                                    \"https://extranet.atlassian.com/download/thumbnails/2302285232/IMG_9830.JPG?api=v2\"></a>\r\n                                </div>\r\n    \r\n                                <figcaption class=\"cp-thumbnail-title\">\r\n                                    IMG_9830.JPG\r\n                                </figcaption>\r\n                            </figure>\r\n                        </li>\r\n    \r\n                        <li class=\"cp-thumbnail\">\r\n                            <figure class=\"cp-thumbnail-group\">\r\n                                <div class=\"cp-thumbnail-img\">\r\n                                    <a class=\"cp-thumbnail-img-container\" href=\r\n                                    \"#\"><img alt=\r\n                                    \"View a larger version of IMG_9825.JPG\" src=\r\n                                    \"https://extranet.atlassian.com/download/thumbnails/2302285232/IMG_9825.JPG?api=v2\"></a>\r\n                                </div>\r\n    \r\n                                <figcaption class=\"cp-thumbnail-title\">\r\n                                    IMG_9825.JPG\r\n                                </figcaption>\r\n                            </figure>\r\n                        </li>\r\n    \r\n                        <li class=\"cp-thumbnail\">\r\n                            <figure class=\"cp-thumbnail-group\">\r\n                                <div class=\"cp-thumbnail-img\">\r\n                                    <a class=\"cp-thumbnail-img-container\" href=\r\n                                    \"#\"><img alt=\r\n                                    \"View a larger version of image2014-9-22 17:7:34.png\"\r\n                                    src=\r\n                                    \"https://extranet.atlassian.com/download/thumbnails/2302285232/image2014-9-22%2017%3A7%3A34.png?api=v2\"></a>\r\n                                </div>\r\n    \r\n                                <figcaption class=\"cp-thumbnail-title\">\r\n                                    image2014-9-22 17:7:34.png\r\n                                </figcaption>\r\n                            </figure>\r\n                        </li>\r\n    \r\n                        <li class=\"cp-thumbnail selected\">\r\n                            <figure class=\"cp-thumbnail-group\">\r\n                                <div class=\"cp-thumbnail-img\">\r\n                                    <a class=\"cp-thumbnail-img-container\" href=\r\n                                    \"#\"><img alt=\r\n                                    \"View a larger version of IMG_9857.JPG\" src=\r\n                                    \"https://extranet.atlassian.com/download/thumbnails/2302285232/IMG_9857.JPG?api=v2\"></a>\r\n                                </div>\r\n    \r\n                                <figcaption class=\"cp-thumbnail-title\">\r\n                                    IMG_9857.JPG\r\n                                </figcaption>\r\n                            </figure>\r\n                        </li>\r\n    \r\n                        <li class=\"cp-thumbnail\">\r\n                            <figure class=\"cp-thumbnail-group\">\r\n                                <div class=\"cp-thumbnail-img\">\r\n                                    <a class=\"cp-thumbnail-img-container\" href=\r\n                                    \"#\"><img alt=\r\n                                    \"View a larger version of image2014-9-22 10:17:40.png\"\r\n                                    src=\r\n                                    \"https://extranet.atlassian.com/download/thumbnails/2302285232/image2014-9-22%2010%3A17%3A40.png?api=v2\"></a>\r\n                                </div>\r\n    \r\n                                <figcaption class=\"cp-thumbnail-title\">\r\n                                    image2014-9-22 10:17:40.png\r\n                                </figcaption>\r\n                            </figure>\r\n                        </li>\r\n                    </ol>\r\n                </div>\r\n            </div>\r\n    \r\n            <div class=\"panel-view\" id=\"cp-sidebar\"></div>\r\n        </div>\r\n    </body>\r\n    </html>\r\n\r\nCode extract: \r\n    define(\"cp/component/minimode/file-minimode-view\",\r\n        [\r\n            \"jquery\",\r\n            \"ajs\",\r\n            \"backbone\",\r\n            \"cp/component/minimode/file-thumbnail-view\",\r\n            \"cp/component/template-store-singleton\"\r\n        ],\r\n        function(\r\n            $,\r\n            AJS,\r\n            Backbone,\r\n            FileThumbnailView,\r\n            templateStore\r\n        ) {\r\n            \"use strict\";\r\n\r\n            var FileMinimodeView = Backbone.View.extend({\r\n\r\n                id: \"cp-footer-minimode\",\r\n\r\n                initialize: function(options) {\r\n                    this.subviews = [];\r\n                    this._fileViewer = options.fileViewer;\r\n                    this._panelView = options.panelView;\r\n                    this.listenTo(this.collection, 'add reset', this.render);\r\n                    this.listenTo(this._panelView, 'togglePanel', this._fireAnalytics);\r\n                    this.listenTo(this._panelView, 'renderPanel', this._forceChromeRepaint);\r\n                    this.listenTo(this._panelView, 'renderPanel', this.scrollToSelected);\r\n                    this.$minimode = $(templateStore.get('minimode')());\r\n                    this.$minimode.appendTo(this.$el);\r\n                },\r\n\r\n                closeOldSubviews: function() {\r\n                    while (this.subviews.length > 0) {\r\n                        var view = this.subviews.pop();\r\n                        view.remove();\r\n                        view.unbind();\r\n                    }\r\n                },\r\n\r\n                render: function() {\r\n                    this.closeOldSubviews();\r\n\r\n                    this.collection.each(function(model) {\r\n                        var view = new FileThumbnailView({\r\n                            model: model,\r\n                            fileViewer: this._fileViewer,\r\n                            panelView: this._panelView\r\n                        });\r\n                        this.subviews.push(view);\r\n                        $(view.render().el).appendTo(this.$minimode);\r\n                    }, this);\r\n\r\n                    return this;\r\n                },\r\n\r\n                scrollToSelected: function() {\r\n                    var file = this._fileViewer._fileState.getCurrent();\r\n                    this.subviews.forEach(function (view) {\r\n                        if(view.model === file) {\r\n                            var topPos = view.$el.get(0).offsetTop - 59;\r\n                            if ((topPos) && this.$el.scrollTop !== topPos) {\r\n                                this.$el.find(\"#cp-thumbnails\").scrollTop(topPos);\r\n                            }\r\n                        }\r\n                    }.bind(this));\r\n                },\r\n\r\n                _fireAnalytics: function(panelId, isExpanded) {\r\n                    if (panelId === 'minimode') {\r\n                        AJS.trigger('analyticsEvent',\r\n                            {name: isExpanded ?\r\n                                'confluence-spaces.previews.minimode.opened' :\r\n                                'confluence-spaces.previews.minimode.closed'\r\n                            }\r\n                        );\r\n                    }\r\n                },\r\n\r\n                _forceChromeRepaint: function() {\r\n                    // Chrome doesn't respect the 100% height on images once the container is resized.\r\n                    var $img = $(\"#cp-img\");\r\n                    if ($img.length) {\r\n                        var $preview = $img.closest(\"#cp-image-preview\"),\r\n                            left = $preview.scrollLeft(),\r\n                            top = $preview.scrollTop();\r\n                        $img.css('display', 'none').height();\r\n                        $img.css('display', 'inline-block');\r\n                        $preview.scrollLeft(left);\r\n                        $preview.scrollTop(top);\r\n                    }\r\n                }\r\n\r\n            });\r\n\r\n            return FileMinimodeView;\r\n        }\r\n    );\r\n\r\n### Aggregated notifications inbox\r\nLibraries & tools: `Backbone.js`, `underscore.js`, `jQuery`, `Jasmine`\r\nInvolvement: developer in a\r\n\r\n### User onboarding experiments\r\nLanguages: `JavaScript`, `HTML`, `CSS`\r\nLibraries & tools: `underscore.js`, `jQuery`, `grunt`, `RequireJS`\r\nInvolvement: sole developer\r\n\r\n## Lenditt - a collaborative consumption experiment\r\nLanguages: `JavaScript`, `HTML`, `CSS`, `Python` (Django)\r\nLibraries & tools: `Backbone.js`, `underscore.js`, `jQuery`, `bootstrap`\r\nInvolvement: Sole developer + design\r\n\r\nWhile doing my Masters degree in Computer Science and living in a small community, I created a site that would allow people to rent out commonly-used items to each other. The website was a social experiment (that ultimately failed). I acted as designer as well as full stack developer. \r\n\r\nScreenshot:\r\n![Lenditt](https://github.com/nali/work/blob/master/screenshots/lenditt.png)\r\n\r\n \r\n## Typespeed - a kitsch Star Wars themed typing game\r\nLanguages: `Clojure`\r\nLibraries & tools: `Leiningen`\r\nInvolvement: pair programmed\r\n\r\nWith my (now) husband, I wrote a typing game in Clojure for fun. It was an interesting challenge to try an develop in a functional style. The graphics are intended to be retro-kitsch. \r\n\r\nThe game in action:\r\n\r\nCode extract: \r\n  (ns typewars.core\r\n      (:gen-class :main true)\r\n      (:require \r\n        [clojure.contrib.string :as st]\r\n        [clojure.java.io :as io])\r\n      (:use quil.core)\r\n    )\r\n\r\n    (import '(java.applet Applet)\r\n            '(java.io File)\r\n            '(java.net URL))\r\n\r\n    (defn rand-seek [x]\r\n      (nth x (rand-int (count x)))\r\n    )\r\n\r\n    (defn get-lines [wordfile]\r\n      \"Seek each word to be typed, from a file\"\r\n      (with-open [r (io/reader wordfile)]\r\n        (doall (line-seq r))))\r\n\r\n    (defn clean-word [s]\r\n      \"Given a string, lower-case words with whitespace and punctuation removed\"\r\n      (map #(.toLowerCase %) (filter #(not (.isEmpty %)) (seq (.split #\"[\\s\\W]+\" s)))))\r\n\r\n    (defn play-url [url-string]\r\n      (.play (Applet/newAudioClip (URL. url-string))))\r\n\r\n    (defn find-sound [file-name]\r\n      \"Tailors soundclip addresses for play-url\"\r\n      (let [absolute-name (.getAbsolutePath (File. file-name))]\r\n            (str \"file://\" absolute-name)\r\n      )\r\n    )\r\n\r\n    (defn get-star-wars-quote []\r\n      (let [quotes (list \"May the Force be with you\" \r\n                         \"I find your lack of faith disturbing\"\r\n                         \"Iâ€™ve got a very bad feeling about this\"\r\n                         \"Youâ€™re all clear, kid! Now letâ€™s blow this thing and go home!\"\r\n                         \"The Force is strong with this one\"\r\n                         \"What a piece of junk!\"\r\n                         \"Watch your mouth kid, or youâ€™ll find yourself floating home\"\r\n                         \"Arenâ€™t you a little short for a stormtrooper?\"\r\n                         \"You came in here and you didnâ€™t have a plan for getting out?\"\r\n                         \"Into the garbage chute, flyboy!\"\r\n                         \"I suggest a new strategy, R2. Let the wookiee win\"\r\n                         \"When I left you, I was but the learner, now I am the master\"\r\n                         \"These arenâ€™t the droids youâ€™re looking for\"\r\n                         \"I've always liked your shoes\")]\r\n        (rand-seek quotes)\r\n      )\r\n    )\r\n\r\n    (defn setup []\r\n      (let [funfont (create-font \"resources/ProFontWindows.ttf\" 30)\r\n            wordfile \"resources/intro.txt\"                          ; The file containing a newline separated word list\r\n            bgfile   \"resources/mainscreen.jpg\"       ; The background image\r\n            introfile \"resources/introscreen.jpg\"         ; The intro image\r\n            endfile  \"resources/endscreen.jpg\"  ; The image to be displayed at the end \r\n            forcebarfile \"resources/lightsbr.png\"]\r\n        (frame-rate 24)\r\n        (smooth)\r\n        (background 0)\r\n        (text-font funfont)\r\n        (no-fill)\r\n        (set-state! :score        (atom 0)\r\n                    :typed        (atom \"\")\r\n                    :game         (atom '())\r\n                    :words        (atom (get-lines wordfile))\r\n                    :missedwords  (atom 0)\r\n                    :ended        (atom -1)\r\n                    :bg           (load-image bgfile)\r\n                    :intro        (load-image introfile)\r\n                    :end          (load-image endfile)\r\n                    :forcebar     (load-image forcebarfile)\r\n                    :quotesw      (atom (get-star-wars-quote))\r\n                    :wordfile     wordfile\r\n        )\r\n      )\r\n    )\r\n\r\n    (defn make-str\r\n      \"Make a string from a sequence of characters\"\r\n      ([chars] (make-str chars \"\"))\r\n      ([chars result]\r\n        (if (zero? (count chars))\r\n          result\r\n          (recur (drop 1 chars) (str result (first chars)))\r\n        )\r\n      )\r\n    )\r\n\r\n    (defn is-in [n typed word]\r\n      (if (> n 0)\r\n        (if (= (take n word) (take-last n typed))\r\n          n\r\n          (is-in (- n 1) typed word)    \r\n        )\r\n        0\r\n      )\r\n    )\r\n\r\n    (defn drawword [x]\r\n      (let [typed (state :typed)\r\n            n     (is-in (count (x :word)) @typed (x :word))]\r\n        (fill 255 255 255)\r\n        (text (make-str (take n (x :word))) (x :posx)  (x :posy))\r\n        (fill 206 145 60)\r\n        (text (make-str (take-last (- (count (x :word)) n) (x :word))) (+ (x :posx) (* n 15)) (x :posy))\r\n      )\r\n    )\r\n\r\n    (defn updatepos [y]\r\n      (do (update-in y [:posx] #(+ % (:speed y))))\r\n    )\r\n\r\n    (defn get-ypos [] \r\n      (+ (rand-int (- (height) 150)) 75)\r\n    )\r\n\r\n    (defn get-speed []\r\n      (+ (rand-int 5) 2)\r\n    )\r\n\r\n    (defn end-game []\r\n      (let [ended   (state :ended)\r\n            quotesw (state :quotesw)]\r\n        (reset! ended 1)\r\n        (reset! quotesw (get-star-wars-quote))\r\n      )\r\n    )\r\n\r\n    (defn get-word []\r\n      (let [words   (state :words)]\r\n        (do\r\n          (reset! words (rest @words)) \r\n          (first (clean-word (first @words)))\r\n\r\n        )\r\n      )\r\n    )\r\n\r\n    (defn newitem []\r\n      (let [posx-list   (take 20 (range))\r\n            word        (get-word)]\r\n        (if (not= word nil)\r\n          {:word word\r\n          :posx (rand-seek posx-list)\r\n          :posy (get-ypos)\r\n          :speed (get-speed)}\r\n          (end-game)\r\n        )\r\n      )\r\n    )\r\n\r\n    (defn reset-game []\r\n      (let [game (state :game)\r\n            typed (state :typed)\r\n            missedwords (state :missedwords)\r\n            words (state :words)\r\n            score (state :score)]\r\n      (reset! game '())\r\n      (reset! missedwords 0)\r\n      (reset! words '())\r\n      (reset! typed \"\")\r\n      ;(reset! score 0)\r\n      )\r\n    )\r\n\r\n    (defn matchword [x]\r\n      (let [game    (state :game)\r\n            typed   (state :typed)\r\n            score   (state :score)\r\n            sounds  (map find-sound '(\"resources/lasrhit1.wav\" \"resources/lasrhit2.wav\" \"resources/lasrhit3.wav\" \"resources/lasrhit4.wav\"))]\r\n        (if (clojure.contrib.string/substring? (x :word) @typed);if a substring of what is typed is a word\r\n          (do (swap! score + (* (count (x :word)) (x :speed)))         \r\n              (reset! typed \"\")\r\n              (play-url (rand-seek sounds))\r\n              true)\r\n          false\r\n        )\r\n      )\r\n    )\r\n\r\n    (defn draw []\r\n      (let [game        (state :game)\r\n            score       (state :score)\r\n            words       (state :words)\r\n            numwords    (count @words)\r\n            gamelength  (count @game)\r\n            bg          (state :bg)\r\n            end         (state :end) \r\n            intro       (state :intro)\r\n            ended       (state :ended)\r\n            forcebar    (state :forcebar)\r\n            missedwords (state :missedwords)\r\n            quotesw     (state :quotesw)\r\n            ]\r\n\r\n          (if (= -1 @ended)\r\n            (background-image intro)\r\n            (do \r\n              (if (and (< gamelength 1) (= 1 @ended))\r\n                (do (background-image end)\r\n                    (text-size 40)\r\n                    (fill 212 210 56)\r\n                    (text-align :center)\r\n                    (text @quotesw 630 100)\r\n                    (text (str \"SCORE \" @score) 630 395)\r\n                    (text-align :left)\r\n                )\r\n\r\n              (if (or (> numwords 0) (> gamelength 0))\r\n                (do (background-image bg)\r\n                  (if (= @missedwords 10)\r\n                    (do\r\n                      (end-game)\r\n                      (reset-game)\r\n                    )\r\n                  )\r\n                  (let [life (* (/ @missedwords 10) 240) \r\n                        screencopy (get-pixel (- 400 life) 40 (+ 20 life) 43)]\r\n                    (set-image 30 40 forcebar)\r\n                    (set-image (- 400 life) 40 screencopy)\r\n                  )\r\n                  (fill 255 255 255)\r\n                  (text (str \"SCORE \" @score) 30 (- (height) 25))\r\n                  (doall (map drawword @game))\r\n                  (reset! game (map updatepos @game))\r\n                  (swap! missedwords + (count (filter #(> (% :posx) (width)) @game)))\r\n                  (reset! game (remove #(> (% :posx) (width)) @game))\r\n\r\n                  (if (> numwords 1)\r\n                    (if (= 0 (mod (frame-count) (+ 20 (rand-int 10))))\r\n                      (reset! game (concat @game (list (newitem))))\r\n                    )\r\n                  (end-game)\r\n                  )\r\n                  )\r\n                )\r\n              )\r\n            )\r\n          )\r\n      )\r\n    )\r\n\r\n\r\n    (defn key-press []\r\n      (let [typed (state :typed)\r\n            game (state :game)\r\n            letter (str (raw-key))\r\n            ended (state :ended)\r\n            words (state :words)\r\n            wordfile (state :wordfile)\r\n            missedwords (state :missedwords)]\r\n          (if (and (or (= -1 @ended) (= 1 @ended)) (= letter \" \"))\r\n            (do \r\n              (reset-game)\r\n              (reset! words (get-lines wordfile))\r\n              (reset! ended 0)\r\n              ;(play-url (find-sound \"resources/cantina.mid\"))\r\n              (text-size 30)\r\n            )  \r\n          (do  \r\n            (reset! typed (str @typed letter))\r\n            (reset! game (remove matchword @game))\r\n          )\r\n        )\r\n      )\r\n    )\r\n\r\n    (defsketch gen-art-3\r\n      :title \"TYPEWARS\"\r\n      :setup setup\r\n      :draw draw\r\n      :size [1260 630]\r\n      :key-typed key-press\r\n    )\r\n\r\n## More?\r\nI keep most of my code for personal projects over at [https://bitbucket.org/nali](https://bitbucket.org/nali).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}